{"version":3,"sources":["index.js"],"names":["Square","props","react__WEBPACK_IMPORTED_MODULE_6___default","a","createElement","className","concat","isWinner","onClick","value","Board","createCells","rows","i","cells","n","push","_this","renderSquare","key","_this2","this","winSquares","includes","squares","React","Component","Game","_this3","Object","C_Users_igor_Desktop_rs_react_tic_tac_toe_game_node_modules_babel_runtime_helpers_esm_classCallCheck__WEBPACK_IMPORTED_MODULE_1__","C_Users_igor_Desktop_rs_react_tic_tac_toe_game_node_modules_babel_runtime_helpers_esm_possibleConstructorReturn__WEBPACK_IMPORTED_MODULE_3__","C_Users_igor_Desktop_rs_react_tic_tac_toe_game_node_modules_babel_runtime_helpers_esm_getPrototypeOf__WEBPACK_IMPORTED_MODULE_4__","call","state","history","Array","fill","currentRow","currentColumn","stepNumber","xIsNext","isDescending","row","Math","floor","col","slice","length","calculateWinner","currentRowColumn","calculateRowCol","setState","step","status","_this4","current","winner","moves","map","move","desc","jumpTo","player","line","handleClick","reverse","reverseHistoryList","lines","_lines$i","C_Users_igor_Desktop_rs_react_tic_tac_toe_game_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_0__","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.a33b8ddc.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square(props) {\n  return (\n    <button \n      className={`square ${props.isWinner ? 'square--winner' : ''}`}\n      onClick={props.onClick}\n    >\n      {props.value}\n    </button>\n  );\n}\n\nclass Board extends React.Component {\n  renderSquare(i) {\n    return (\n      <Square\n        isWinner={this.props.winSquares.includes(i) ? true : false}\n        value={this.props.squares[i]}\n        onClick={() => this.props.onClick(i)}\n        key={`square ${i}`}\n      />\n    );\n  }\n\n  createCells = () => {\n    let rows = [];\n    for (let i = 0; i < 3; i ++) {\n      let cells = [];\n        for (let n = 0; n < 3; n++) {\n          cells.push(this.renderSquare(3 * i + n));\n        }\n      rows.push(<div className=\"board-row\" key={`row ${i}`}>{cells}</div>);\n    }\n    return rows;\n  }\n\n  render() {\n    return (\n      <div>\n        {this.createCells()}\n      </div>\n    );\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      history: [{\n          squares: Array(9).fill(null),\n          currentRow: null,\n          currentColumn: null\n        }],\n      stepNumber: 0,\n      xIsNext: true,\n      isDescending: true,\n    }\n  }\n\n  calculateRowCol(i) {\n    const row = Math.floor(i / 3);\n    const col = i - row * 3;\n    return { row: row, col: col}\n  }\n\n  handleClick(i) {\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\n    const current = history[history.length - 1];\n    const squares = current.squares.slice();\n    if (calculateWinner(squares) || squares[i]) {\n      return;\n    }\n    const currentRowColumn = this.calculateRowCol(i);\n    squares[i] = this.state.xIsNext ? 'X' : 'O';\n    this.setState({\n      history: history.concat([{\n        squares: squares,\n        currentRow: currentRowColumn.row,\n        currentColumn: currentRowColumn.col\n      }]),\n      stepNumber: history.length,\n      xIsNext: !this.state.xIsNext,\n    });\n  }\n\n  jumpTo(step) {\n    this.setState({\n      stepNumber: step,\n      xIsNext: (step % 2) === 0,\n    });\n  }\n\n  reverseHistoryList() {\n    this.setState({\n      isDescending: !this.state.isDescending\n    });\n  }\n\n  render() {\n    const history = this.state.history;\n    const current = history[this.state.stepNumber];\n    const winner = calculateWinner(current.squares);\n\n    const moves = history.map((step, move) => {\n      const desc = move ?\n        `Go to move # ${move} (col: ${step.currentColumn}, row: ${step.currentRow})` :\n        'Go to game start';\n      return (\n        <li key={move}>\n          <button onClick={() => this.jumpTo(move)}>\n            {move === this.state.stepNumber ? <b>{desc}</b> : desc}\n          </button>\n        </li>\n      )\n    });\n\n    let status;\n    if (winner) {\n      status = `Winner: ${winner.player}`;\n    } else if (!current.squares.includes(null)) {\n      status = 'Draw';\n    } else {\n      status = `Next player: ${this.state.xIsNext ? 'X' : 'O'}`;\n    }\n    return (\n      <div className=\"game\">\n        <div className=\"game-board\">\n          <Board\n            winSquares={winner ? winner.line : []}\n            squares={current.squares}\n            onClick={(i) => this.handleClick(i)}\n          />\n        </div>\n        <div className=\"game-info\">\n          <div>{status}</div>\n          <ol>{this.state.isDescending ? moves : moves.reverse()}</ol>\n          <button onClick={() => this.reverseHistoryList()}>{`Sort list in ${this.state.isDescending ? 'descending' : 'ascending'} order`}</button>\n        </div>\n      </div>\n    );\n  }\n}\n// ========================================\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\nfunction calculateWinner(squares) {\n  const lines = [\n    [0, 1, 2],\n    [3, 4, 5],\n    [6, 7, 8],\n    [0, 3, 6],\n    [1, 4, 7],\n    [2, 5, 8],\n    [0, 4, 8],\n    [2, 4, 6],\n  ];\n\n  for (let i = 0; i < lines.length; i++) {\n    const [a, b, c] = lines[i];\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n      return { player: squares[a], line: [a, b, c] };\n    }\n  }\n  return null;\n}\n\n"],"sourceRoot":""}